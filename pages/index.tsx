/* eslint-disable prettier/prettier */
import Head from "next/head"
import { Key, SWRConfig } from "swr"
import Link from "next/link"
import { Hero, FeaturedPosts } from "../components"
import { useSWRWithTimeout } from "../components/hooks/swr"
import {
  GetRecentPostsResponse,
  GetFeaturedPostsResponse
} from "../components/types/apiResponse"
import { Post } from "../components/types/post"
import type { InferGetStaticPropsType, NextPage, GetStaticProps } from "next"
import request, { gql } from "graphql-request"
import PostCard from "../components/organisms/PostCard"
import { useEffect, useState } from "react"

type HomeDataResponse = {
  data: {
    page: {
      content: string
      title: string
    }
  }
}

type Props = InferGetStaticPropsType<typeof getStaticProps>

const Home: NextPage<Props> = ({ fallback }) => {
  console.log("フォールバック: ", fallback)
  console.log("フォールバック2: ", fallback["api/post/recent"])
  const [recentPosts, setRecentPosts] = useState(fallback["api/post/recent"])
  console.log("recentPosts: ", recentPosts)

  const homePageKey: Key = "api/page/sample-page"

  const { data: homeData, error: homePageError } =
    useSWRWithTimeout<HomeDataResponse>(homePageKey)

  const recentPageKey: Key = "api/post/recent"
  const { data: recentPageData } = useSWRWithTimeout<Post[]>(recentPageKey)

  useEffect(() => {
    if (recentPageData) {
      setRecentPosts(recentPageData)
    }
    console.log("useEffect後のrecentPageData", recentPosts)
  }, [recentPageData, recentPosts])

  if (homePageError) {
    return <div>error...</div>
  }

  if (!homeData) {
    return <div>loading...</div>
  }

  const title = homeData.data.page.title
  const content = homeData.data.page.content

  return (
    <div className="relative">
      <Head>
        <title>travel-like-a-local-jp</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Hero />
        <SWRConfig value={{ fallback }}>
          <FeaturedPosts />
        </SWRConfig>

        <h1>{title}</h1>
        <div dangerouslySetInnerHTML={{ __html: content }}></div>

        {recentPosts?.map((post) => (
          <SWRConfig value={{ fallback }} key={post.slug}>
            <PostCard post={post} />
          </SWRConfig>
        ))}
      </main>
    </div>
  )
}

export default Home

type GetStaticPropsResponse = {
  fallback: {
    "api/post/featured": Post[]
    "api/post/recent": Post[]
  }
}

export const getStaticProps: GetStaticProps<
  GetStaticPropsResponse
> = async () => {
  const GRAPHQL_API_URL = "https://travel-like-a-local-jp.com/graphql"
  const queryGetFeaturedPosts = gql`
    query GetFeaturedPosts {
      posts(where: { tag: "featured" }) {
        edges {
          node {
            slug
            title
            excerpt
            date
            content
            categories {
              edges {
                node {
                  name
                }
              }
            }
            featuredImage {
              node {
                altText
                sourceUrl
              }
            }
            author {
              node {
                name
                avatar {
                  url
                }
              }
            }
          }
        }
      }
    }
  `
  const getFeaturedPostsResponse: GetFeaturedPostsResponse = await request(
    GRAPHQL_API_URL,
    queryGetFeaturedPosts
  )
  const featuredPosts: Post[] = getFeaturedPostsResponse.posts.edges.map(
    ({ node }) => node
  )

  const queryGetRecentPosts = gql`
    query GetRecentPosts {
      posts(first: 5, where: { orderby: { field: DATE, order: DESC } }) {
        edges {
          node {
            slug
            title
            excerpt
          }
        }
      }
    }
  `
  const queryGetRecentPostsResponse: GetRecentPostsResponse = await request(
    GRAPHQL_API_URL,
    queryGetRecentPosts
  )
  const recentPosts: Post[] = queryGetRecentPostsResponse.posts.edges.map(
    ({ node }) => node
  )

  return {
    props: {
      fallback: {
        "api/post/featured": featuredPosts,
        "api/post/recent": recentPosts
      }
    }
  }
}
