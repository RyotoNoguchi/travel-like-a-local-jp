/* eslint-disable prettier/prettier */
import Head from "next/head"
import { SWRConfig } from "swr"
import {
  Hero,
  FeaturedPosts,
  CategoryWidget,
  PostWidget,
  ArchiveWidget
} from "components"
import { GraphqlGetPopularPostsResponse } from "components/types/apiResponse"
import { Post } from "components/types/post"
import type { InferGetStaticPropsType, NextPage, GetStaticProps } from "next"
import request, { gql } from "graphql-request"
import PopularPostCards from "components/organisms/PopularPostCards"
import Archive from "components/types/archive"
const GRAPHQL_API_URL = process.env.WORDPRESS_API_URL ?? ""
import { API_BASE_URL } from "components/constants"
import axios, { AxiosResponse } from "axios"

type Props = InferGetStaticPropsType<typeof getStaticProps>

const Home: NextPage<Props> = ({ fallback }) => {
  // TODO 各コンポーネントのフォールバックに<Skeleton />を使用するように変更
  return (
    <div className="relative">
      <Head>
        <title>travel-like-a-local-jp</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Hero />
        <SWRConfig value={{ fallback }}>
          <FeaturedPosts />
          <div className="grid grid-cols-1 md:grid-cols-12 gap-12 lg:m-24 md:m-8">
            <div className="md:col-span-8 col-span-1">
              {/* fallbackなしだと、レンダリング後にfetcherが叩かれるため、一瞬ブランクな状態が発生する。console.logしてリロードするとundefinedになることを確認できる */}
              <PopularPostCards />
            </div>
            <div className="md:col-span-4 col-span-1 relative">
              <div className="sticky top-8 mb-8">
                <PostWidget />
                <ArchiveWidget />
                <CategoryWidget />
              </div>
            </div>
          </div>
        </SWRConfig>
      </main>
    </div>
  )
}

export default Home

type GetStaticPropsResponse = {
  fallback: {
    "/api/posts/featured": Post[]
    "/api/posts/recent": Post[]
    "/api/posts/popular": Post[]
    "/api/category": string[]
    "/api/widget/archive": Archive[]
  }
}

export const getStaticProps: GetStaticProps<
  GetStaticPropsResponse
> = async () => {
  // featuredPosts取得
  const GetFeaturedPostsResponse = await axios.get<
    Post[],
    AxiosResponse<Post[]>
  >(`${API_BASE_URL}/posts/featured`)
  const featuredPosts = GetFeaturedPostsResponse.data

  // recentPosts取得
  const GetRecentPostsResponse = await axios.get<Post[], AxiosResponse<Post[]>>(
    `${API_BASE_URL}/posts/recent`
  )
  const recentPosts = GetRecentPostsResponse.data

  // ウィジェット用のカテゴリー取得
  const GetCategoriesResponse = await axios.get<
    string[],
    AxiosResponse<string[]>
  >(`${API_BASE_URL}/category`)
  const categories = GetCategoriesResponse.data

  const GetPopularPostsResponse = await axios.get<
    Post[],
    AxiosResponse<Post[]>
  >(`${API_BASE_URL}/posts/popular`)

  const popularPosts = GetPopularPostsResponse.data

  const queryGetAllPosts = gql`
    query GetAllPosts {
      posts {
        edges {
          node {
            date
          }
        }
      }
    }
  `

  const queryGetAllPostsResponse: {
    posts: { edges: { node: { date: string } }[] }
  } = await request(GRAPHQL_API_URL, queryGetAllPosts)

  const dates = queryGetAllPostsResponse?.posts?.edges.map(
    ({ node }) => node.date
  )

  const datesReduceResult = dates.reduce<{ [key: string]: number }>(
    (yearMonthCounts, gmt) => {
      const yyyyMM = gmt.slice(0, 7)

      if (!yearMonthCounts[yyyyMM]) {
        yearMonthCounts[yyyyMM] = 0
      }

      yearMonthCounts[yyyyMM]++

      return yearMonthCounts
    },
    {}
  )

  const postsPerMonth: Archive[] = Object.entries(datesReduceResult).map(
    ([month, count]) => ({ month, count })
  )

  return {
    props: {
      fallback: {
        "/api/posts/featured": featuredPosts,
        "/api/posts/recent": recentPosts,
        "/api/posts/popular": popularPosts,
        "/api/category": categories,
        "/api/widget/archive": postsPerMonth
      }
    }
  }
}
