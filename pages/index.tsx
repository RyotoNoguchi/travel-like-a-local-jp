/* eslint-disable prettier/prettier */
import Head from "next/head"
import { SWRConfig } from "swr"
import { Hero, FeaturedPosts } from "components"
// import axios, { AxiosResponse, AxiosError } from "axios"
// import { useSWRWithTimeout } from "../components/hooks/swr"
import {
  GetRecentPostsResponse,
  GetFeaturedPostsResponse,
  GetPopularPostsResponse
} from "../components/types/apiResponse"
// import { ParsedUrlQuery } from "querystring"
import { Post } from "../components/types/post"
import type {
  InferGetStaticPropsType,
  NextPage,
  GetStaticProps
  // GetStaticPaths/
} from "next"
import request, { gql } from "graphql-request"
import PostCards from "../components/organisms/PostCards"
import PopularPostCards from "../components/organisms/PopularPostCards"
const GRAPHQL_API_URL = process.env.WORDPRESS_API_URL ?? ""

// type HomeDataResponse = {
//   data: {
//     page: {
//       content: string
//       title: string
//     }
//   }
// }

type Props = InferGetStaticPropsType<typeof getStaticProps>

const Home: NextPage<Props> = ({ fallback }) => {
  console.log("fallback:", fallback)
  // const homePageKey: Key = "api/page/sample-page"
  // const { data: homeData, error: homePageError } =
  //   useSWRWithTimeout<HomeDataResponse>(homePageKey)
  // if (homePageError) {
  //   return <div>error...</div>
  // }
  // if (!homeData) {
  //   return <div>loading...</div>
  // }
  // const title = homeData.data.page.title//
  // const content = homeData.data.page.content

  return (
    <div className="relative">
      <Head>
        <title>travel-like-a-local-jp</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Hero />
        <SWRConfig value={{ fallback }}>
          <FeaturedPosts />
        </SWRConfig>
        {/* 
        <h1>{title}</h1>
        <div dangerouslySetInnerHTML={{ __html: content }}></div> */}
        <div className="grid grid-cols-1 md:grid-cols-12 gap-12">
          <div className="md:col-span-8 col-span-1">
            {/* fallbackなしだと、レンダリング後にfetcherが叩かれるため、一瞬ブランクな状態が発生する。console.logしてリロードするとundefinedになることを確認できる */}
            <SWRConfig value={{ fallback }}>
              <PopularPostCards />
            </SWRConfig>
          </div>
        </div>
        <div className="md:col-span-4 col-span-1">
          <div className="lg:sticky relative top-8">
            {/* <SWRConfig value={{ fallback }}>
              <PostCards />
            </SWRConfig> */}
          </div>
        </div>
      </main>
    </div>
  )
}

export default Home

type GetStaticPropsResponse = {
  fallback: {
    "api/post/featured": Post[]
    "api/post/recent": Post[]
    "api/post/popular": Post[]
  }
}

export const getStaticProps: GetStaticProps<
  GetStaticPropsResponse
> = async () => {
  const queryGetFeaturedPosts = gql`
    query GetFeaturedPosts {
      posts(where: { tag: "featured" }) {
        edges {
          node {
            slug
            title
            excerpt
            date
            content
            categories {
              edges {
                node {
                  name
                }
              }
            }
            featuredImage {
              node {
                altText
                sourceUrl
              }
            }
            author {
              node {
                name
                avatar {
                  url
                }
              }
            }
          }
        }
      }
    }
  `
  const getFeaturedPostsResponse: GetFeaturedPostsResponse = await request(
    GRAPHQL_API_URL,
    queryGetFeaturedPosts
  )
  const featuredPosts: Post[] = getFeaturedPostsResponse.posts.edges.map(
    ({ node }) => node
  )

  const queryGetRecentPosts = gql`
    query GetRecentPosts {
      posts(first: 5, where: { orderby: { field: DATE, order: DESC } }) {
        edges {
          node {
            slug
            title
            excerpt
            date
            categories {
              edges {
                node {
                  name
                }
              }
            }
            featuredImage {
              node {
                altText
                sourceUrl
              }
            }
            author {
              node {
                name
                avatar {
                  url
                }
              }
            }
          }
        }
      }
    }
  `
  const queryGetRecentPostsResponse: GetRecentPostsResponse = await request(
    GRAPHQL_API_URL,
    queryGetRecentPosts
  )
  const recentPosts: Post[] = queryGetRecentPostsResponse.posts.edges.map(
    ({ node }) => node
  )

  const queryGetPopularPosts = gql`
    query GetPopularPosts {
      posts(
        where: {
          orderby: { field: META, order: DESC }
          metaQuery: { metaArray: { key: "_post_views_count", type: NUMERIC } }
        }
        first: 5
      ) {
        edges {
          node {
            slug
            title
            excerpt
            date
            categories {
              edges {
                node {
                  name
                }
              }
            }
            featuredImage {
              node {
                altText
                sourceUrl
              }
            }
            author {
              node {
                name
                avatar {
                  url
                }
              }
            }
          }
        }
      }
    }
  `

  const queryGetPopularPostsResponse: GetPopularPostsResponse = await request(
    GRAPHQL_API_URL,
    queryGetPopularPosts
  )
  const popularPosts: Post[] = queryGetPopularPostsResponse.posts.edges.map(
    ({ node }) => node
  )

  return {
    props: {
      fallback: {
        "api/post/featured": featuredPosts,
        "api/post/recent": recentPosts,
        "api/post/popular": popularPosts
      }
    }
  }
}

// type Params = {
//   slug: string
// } & ParsedUrlQuery

// type GetStaticPathsResponse = {
//   data: {
//     posts: {
//       edges: {
//         node: {
//           slug: string
//         }
//       }[]
//     }
//   }
// }

// export const getStaticPaths: GetStaticPaths<Params> = async () => {
//   const options = {
//     method: "POST",
//     url: GRAPHQL_API_URL,
//     headers: { "Content-Type": "application/json" },
//     data: {
//       query: `#graphql
//         query allPosts {
//           posts {
//             edges {
//               node {
//                 slug
//               }
//             }
//           }
//         }
//       `
//     }
//   }
//   const allPosts: GetStaticPathsResponse = await axios
//     .request(options)
//     .then((res: AxiosResponse) => res.data)
//     .catch((err: AxiosError) => {
//       if (err.code === "ECONNABORTED") {
//         console.log("axios API call failed")
//       }
//     })

//   const {
//     data: {
//       posts: { edges }
//     }
//   } = allPosts

//   const paths = edges.map(({ node }) => {
//     return {
//       params: {
//         slug: node.slug
//       }
//     }
//   })

//   return {
//     paths,
//     fallback: true
//   }
// }
