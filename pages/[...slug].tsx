/* eslint-disable prettier/prettier */
import Head from "next/head"
import axios, { AxiosResponse, AxiosError } from "axios"
import useSWR, { Key, Fetcher } from "swr"
import { GetStaticPaths, GetStaticProps } from "next"
const API_URL = process.env.WORDPRESS_API_URL ?? ""

type APIResponse = {
  data: Data
}

type Data = {
  page: Page
}

type Page = {
  content: string
  title: string
}

type Config = {
  timeout: number
}

const Page: React.FC<{ slug: string }> = ({ slug }) => {
  const API_URL: Key = `api/page${slug}`
  const fetcher: Fetcher<APIResponse, string> = (path) =>
    axios
      .get<APIResponse, AxiosResponse<APIResponse, AxiosError>, Config>(path, {
        timeout: 10000
      })
      .then((res) => res.data)

  const { data, error } = useSWR<APIResponse, Error>(API_URL, fetcher)

  if (error) {
    return <div>error...</div>
  }

  if (!data) {
    return <div>loading...</div>
  }

  const title = data.data.page.title
  const content = data.data.page.content

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1>{title}</h1>
        <div dangerouslySetInnerHTML={{ __html: content }}></div>
      </main>
    </div>
  )
}

export default Page

export const getStaticProps: GetStaticProps = async ({ params }) => {
  console.log("slug", params?.slug)
  return {
    props: {
      slug: params && params.slug
    }
  }
}

type GetStaticPathsResponse = {
  data: Pages
}

type Pages = {
  pages: Edges
}

type Edges = {
  edges: Node[]
}

type Node = {
  node: { slug: string }
}

export const getStaticPaths: GetStaticPaths = async () => {
  const options = {
    method: "POST",
    url: API_URL,
    headers: { "Content-Type": "application/json" },
    data: {
      query: `#graphql 
        query allPages {
          pages {
            edges {
              node {
                slug
              }
            }
          }
        }
      `
    }
  }
  const allPosts: GetStaticPathsResponse = await axios
    .request(options)
    .then((res: AxiosResponse) => res.data)
    .catch((err: AxiosError) => {
      if (err.code === "ECONNABORTED") {
        console.log("axios API call failed")
      }
    })

  return {
    paths: allPosts.data.pages.edges.map(({ node }) => node.slug) || [],
    fallback: true
  }
}
